# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ft_memset.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jgermany <nyaritakunai@outlook.com>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/11/25 11:26:54 by jgermany          #+#    #+#              #
#    Updated: 2022/12/13 20:24:58 by jgermany         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Libft - ft_memset ðŸŸ¢ðŸ”´

Evil tests made with ðŸ˜ˆðŸ˜ˆðŸ˜ˆ passion

Context : The memset() function fills the first n bytes of the memory area
pointed to by s with the constant byte c.

Notes:
	- n, the size of memory, varies according to the type (ex : 
	memset(arr1, 65, 10 * sizeof(int)). So watch out this part or it won't 
	work.
	- c, the int, seems to be casted to char or unsigned char. Ex : 
	memset(arr1, 65, 10 * sizeof(int) write 'A' in arr1.


What kind of tests should we do here?
	-> See below

(Do I really understand typecasting ???)

Test material
	- Array of <> or space allocated via malloc
	- Original memset (#include <string.h>)

Invalid memory
	ft_memset((void *)0, 1, size_t n)





[ðŸ”´] Happy path :)
	"I" (73)
		-> 1 or 1024
	"g" (103)
		-> 1 or 1024
	"x" (120)
		-> 1 or 1024

[ðŸ”´] Alpha extremes
	"a" (97)
		-> 1 or 1024
	"z" (122)
		-> 1 or 1024
	"A" (65)
		-> 1 or 1024
	"Z" (90)
		-> 1 or 1024

[ðŸ”´] Still ascii but not alpha
	"0" (48)
		-> 0
	"0" (0)
		-> 0
	"13" (13)
		-> 0
	"<" (60)
		-> 0
	"\" (92)
		-> 0
	"127" (127)
		-> 0
	"255" (255)
		-> 0

[ðŸ”´] Completely out of bounds
	"-255" (-255)
		-> 0
	"-1" (-1)
		-> 0
	"580" (580)
		-> 0
	"2147483647" (2147483647)
		-> 0
